'use strict';

var app = angular.module('filmActorSearch', ['ngRoute', 'services'])

	.constant("moviesDBAPIKey", "3b346f117a4f4fc787e8d7e4eeb73cd5")

	.config(["personSearchProvider", "moviesDBAPIKey", function (personSearchProvider, moviesDBAPIKey) {

		personSearchProvider.setKey(moviesDBAPIKey);

	}])

	.config(["moviesWithCastProvider", "moviesDBAPIKey", function (moviesWithCastProvider, moviesDBAPIKey) {

		moviesWithCastProvider.setKey(moviesDBAPIKey);

	}])

	.config(["basicMovieInformationProvider", "moviesDBAPIKey", function (basicMovieInformationProvider, moviesDBAPIKey) {

		basicMovieInformationProvider.setKey(moviesDBAPIKey);

	}])

	.config(["movieDBConfigProvider", "moviesDBAPIKey", function (movieDBConfigProvider, moviesDBAPIKey) {

		movieDBConfigProvider.setKey(moviesDBAPIKey);

	}]);


/**
 * Routes
 */
app.config(['$routeProvider', '$locationProvider',
	function($routeProvider, $locationProvider) {
		$routeProvider.
			when('/', {
				templateUrl: '../views/SearchFilms.html',
				controller: 'SearchFilms'
			}).
			when('/movie/:id', {
				templateUrl: '../views/MovieDetails.html',
				controller: 'MovieDetails'
			}).
			when('/404', {
				templateUrl: '../views/404.html'//,
				//controller: 'MovieDetails'
			}).
			otherwise({
				redirectTo: '/404'
			});

		$locationProvider.html5Mode(true);
	}]);
(function (app) {

	app.controller('MovieDetails', [
		'$scope',
		'$routeParams',
		'$location',
		'basicMovieInformation',
		function ($scope, $routeParams, $location, basicMovieInformation) {

			console.log($routeParams.id);

			var movieId = parseInt($routeParams.id);

			if(movieId !== movieId) {

				$location.path('/404');
				return;

			}

			$scope.movie = {
				title : 'Wild Things',
				id : 617,
				tagline : "They're dying to play with you",
				overview : 'When teen-socialite Kelly Van Ryan (Richards) and troubled bad girl Suzie Toller (Campbell) accuse guidance counselor Sam Lombardo (Dillon) of rape, he is suspended by the school, rejected by the town, and fighting to get his life back. One cop (Bacon) suspects conspiracy, but nothing is what it seems...',
				vote_average : 6.2,
				backdrop_path : '/z4Ky75Wjt7to5xfk1mgc7DfQEgr.jpg',
				homepage : 'http://www.google.com',
				poster_path : '/dI9iYo1cL81yzJkBVyNGipjSvy0.jpg',
				popularity : 0.711861883496939,
				imdb_id : 'tt0120890',
				revenue : 67200000,
				runtime : 129
			};

			function applyMovieDetailsData (data) {

				$scope.movie = data;

			};

			function loadMovieDetailsData(id) {

				basicMovieInformation.getResults($routeParams.id)
					.then(function (response) {
						applyMovieDetailsData(response);
					})
					['catch'](function (err) {
						doError(err);
					});

			};

			//loadMovieDetailsData(movieId);

		}]);

}(app));
(function (app, angular) {

	app.controller('SearchFilms', [
		'$scope',
		'$rootScope',
		'personSearch',
		'moviesWithCast',
		'movieDBConfig',
		'$location',
		'windowNotifications',
		'changeBackdrop',
		function($scope, $rootScope, personSearch, moviesWithCast, movieDBConfig, $location, windowNotifications, changeBackdrop) {

			var keyFireLength = 4,
				chosenName,
				doError = function (err) {

					windowNotifications.addMessage(err.data ? 'Error: ' + err.data.status_message : 'Sorry, an error occurred.')

				};

			$scope.actorSearchTerm = '';
			$scope.movieSearchTerm = '';

			$scope.$watch("actorSearchTerm", function (newValue) {

				if(newValue.length > keyFireLength && $scope.actorSearchTerm !== chosenName) {

					loadPersonSearchData($scope.actorSearchTerm);

				}

			});

			$scope.closeError = function () {

				delete $scope.error;

			};

			$scope.formatKnownForString = function (arr) {

				if(!arr || !arr.length) {
					return;
				}

				var str = '',
					arrLen = arr.length;

				for(var i = 0; i < arrLen; i++) {

					if(arr[i].title) {
						str += str ? ', ' + arr[i].title : arr[i].title;
					}

				}

				return str ? 'Known for: ' + str : '';

			};

			$scope.chooseActor = function (personId, profilePath, name) {

				$scope.personResults = [];
				loadPersonMovies(personId);

				chosenName = name;
				$scope.actorSearchTerm = name;

				console.log(movieDBConfig);

				movieDBConfig.getConfig(function (movieConfig) {

					console.log('config:', movieConfig);

					$scope.profileImage = profilePath ? movieConfig.images.base_url + movieConfig.images.profile_sizes[1] + profilePath : null;

				});

			};

			$scope.chooseMovie = function (movie) {

				$location.path('/movie/' + movie.id);

			};

			$scope.cancelPerson = function () {

				$scope.movies = [];
				$scope.actorSearchTerm = '';
				$scope.profileImage = null;
				changeBackdrop(null);

				$('.searchPersonControl').focus();

			};

			$scope.cancelMovieSearch = function () {

				$scope.movieSearchTerm = '';

			};

			function applyPersonSearchData(data) {

				$scope.personResults = data.results || [];

			};

			function loadPersonSearchData(term, cb) {

				/**
				 * Stubbing (would usually be in Jasmine unit test)
				 */
				/*applyPersonSearchData({

					results: [
						{
							'name': 'Bill Murray',
							'id': 1532,
							'known_for': [
								{
									title: 'Ghost Busters'
								},
								{
									title: 'Groundhog Day'
								}
							]
						},
						{
							'name': 'Billy Murray',
							'id': 63073,
							'known_for': [
								{
									title: 'Rise of the Footsoldier'
								},
								{
									title: 'One in the chamber'
								}
							]
						}
					]

				});*/

				personSearch.getResults(term)
					.then(function (response) {
						applyPersonSearchData(response);
					})
					['catch'](function (err) {
						doError(err);
					});

			};

			function applyMovieData (data) {

				var backdropPath;

				$scope.movies = data.results || [];

				if(data.results.length && typeof data.results[0].backdrop_path !== 'undefined') {
					backdropPath = data.results[0].backdrop_path;
				}

				changeBackdrop(backdropPath);

			};

			function loadPersonMovies (personId) {

				/**
				 * Stubbing (would usually be in Jasmine unit test)
				 */
				/*applyMovieData({
					results: [
						{
							'id': 123,
							'title': 'Dumb and Dumber To',
							'release_date': '2014-11-14'
						},
						{
							'id': 512,
							'title': 'Groundhog Day',
							'release_date': '1993-02-11'
						},
						{
							'id': 789,
							'title': 'Another',
							'release_date': '1993-02-11'
						}
					]
				});*/

				moviesWithCast.getResults(personId)
					.then(function (response) {
						applyMovieData(response);
					})
					['catch'](function (err) {
						doError(err);
					});

			};

			/**
			 * Choose default profile.
			 */
			/*$scope.load = function () {

				$scope.actorSearchTerm = 'Bill Murray';

				loadPersonSearchData($scope.actorSearchTerm);

			};*/

		}]);

}(app, angular));
(function (angular) {

	angular.module("services", [])
		.provider("movieDBConfig", [function () {

			var key = '',
				configCache = null;

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getConfig(cb) {

					if(configCache) {

						cb(configCache);

					}

					$http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/configuration?api_key=" + key
					}).then(function (response) {

							configCache = response.data;
							cb(configCache);

						}, function (response) {

							console.log('error');

						});

				};

				return {
					getConfig: getConfig
				};

			}];

		}])
		.provider("personSearch", [function () {

			var key = '',
				currentPerson = '';

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getResults(term) {

					currentPerson = term;

					//http://api.themoviedb.org/3/search/person?api_key=3b346f117a4f4fc787e8d7e4eeb73cd5&query=bill%20murray

					var request = $http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/search/person?api_key=" + key + "&query=" + term
					});

					return ( request.then(handleSuccess) );

				};

				function handleSuccess(response) {
					return ( response.data );
				};

				return {
					getResults: getResults
				};

			}];

		}])
		.provider("moviesWithCast", [function () {

			var key = '';

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getResults(personId) {

					//http://api.themoviedb.org/3/discover/movie

					var request = $http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/discover/movie?api_key=" + key + "&with_cast=" + personId
					});

					return ( request.then(handleSuccess) );

				};

				function handleSuccess(response) {
					return ( response.data );
				};

				return {
					getResults: getResults
				};

			}];

		}])
		.provider("basicMovieInformation", function () {

			var key = '';

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getResults(movieId) {

					//http://api.themoviedb.org/3/movie/id

					var request = $http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/movie/" + movieId + "?api_key=" + key
					});

					return ( request.then(handleSuccess) );

				};

				function handleSuccess(response) {
					return ( response.data );
				};

				return {
					getResults: getResults
				};

			}];

		})
		.factory("windowNotifications", ['$rootScope', function ($rootScope) {

			var messages = [];

			function showMessages () {

				$rootScope.error = {};
				$rootScope.error.message = messages[0];

			};

			function clearMessages () {

				$rootScope.error = null;

			};

			$rootScope.$on('clearMessages', function () {

				clearMessages();

			});

			return {

				addMessage : function (messageString) {

					messages.push(messageString);

					showMessages();

				},

				clearMessages : clearMessages

			};

		}])
		.factory("changeBackdrop", ['$rootScope', 'movieDBConfig', function ($rootScope, movieDBConfig) {

			var setBackDrop = function (path, movieConfig) {

					$rootScope.backdropImage = path ? movieConfig.images.base_url + movieConfig.images.backdrop_sizes[2] + path : null;

				};

			return function (path) {

				//movieDBConfig = {"images":{"base_url":"http://image.tmdb.org/t/p/","secure_base_url":"https://image.tmdb.org/t/p/","backdrop_sizes":["w300","w780","w1280","original"],"logo_sizes":["w45","w92","w154","w185","w300","w500","original"],"poster_sizes":["w92","w154","w185","w342","w500","w780","original"],"profile_sizes":["w45","w185","h632","original"],"still_sizes":["w92","w185","w300","original"]},"change_keys":["adult","air_date","also_known_as","alternative_titles","biography","birthday","budget","cast","certifications","character_names","created_by","crew","deathday","episode","episode_number","episode_run_time","freebase_id","freebase_mid","general","genres","guest_stars","homepage","images","imdb_id","languages","name","network","origin_country","original_name","original_title","overview","parts","place_of_birth","plot_keywords","production_code","production_companies","production_countries","releases","revenue","runtime","season","season_number","season_regular","spoken_languages","status","tagline","title","translations","tvdb_id","tvrage_id","type","video","videos"]};

				movieDBConfig.getConfig(function (data) {

					setBackDrop(path, data);

				});

			};

		}]);

}(angular));