
var app = angular.module('filmActorSearch', ['ngRoute', 'services']);

(function (app) {

	'use strict';

	app.constant("moviesDBAPIKey", "3b346f117a4f4fc787e8d7e4eeb73cd5")

		.config(["personSearchProvider", "moviesDBAPIKey", function (personSearchProvider, moviesDBAPIKey) {

			personSearchProvider.setKey(moviesDBAPIKey);

		}])

		.config(["moviesWithCastProvider", "moviesDBAPIKey", function (moviesWithCastProvider, moviesDBAPIKey) {

			moviesWithCastProvider.setKey(moviesDBAPIKey);

		}])

		.config(["basicMovieInformationProvider", "moviesDBAPIKey", function (basicMovieInformationProvider, moviesDBAPIKey) {

			basicMovieInformationProvider.setKey(moviesDBAPIKey);

		}])

		.config(["movieDBConfigProvider", "moviesDBAPIKey", function (movieDBConfigProvider, moviesDBAPIKey) {

			movieDBConfigProvider.setKey(moviesDBAPIKey);

		}])

		.config(["movieVideosProvider", "moviesDBAPIKey", function (movieVideosProvider, moviesDBAPIKey) {

			movieVideosProvider.setKey(moviesDBAPIKey);

		}])
		.config(["$sceDelegateProvider", function($sceDelegateProvider) {

			$sceDelegateProvider.resourceUrlWhitelist([
				// Allow same origin resource loads.
				'self',
				// Allow loading from our assets domain.  Notice the difference between * and **.
				window.location.protocol + '//api.themoviedb.org/3/**',
				window.location.protocol + '//www.youtube.com/**']);

		}])

		/**
		 * Routes
		 */
		.config(['$routeProvider', '$locationProvider',
			function($routeProvider, $locationProvider) {
				$routeProvider.
					when('/', {
						templateUrl: '../views/SearchFilms.html',
						controller: 'SearchFilms'
					}).
					when('/movie/:id', {
						templateUrl: '../views/MovieDetails.html',
						controller: 'MovieDetails'
					}).
					when('/404', {
						templateUrl: '../views/404.html'//,
						//controller: 'MovieDetails'
					}).
					otherwise({
						redirectTo: '/404'
					});

				$locationProvider.html5Mode(true);
			}]);

}(app));
(function (app) {

	"use strict";

	app.controller('MovieDetails', [
		'$scope',
		'$routeParams',
		'$location',
		'movieDBConfig',
		'utils',
		'changeBackdrop',
		'windowNotifications',
		'basicMovieInformation',
		'movieVideos',
		function ($scope, $routeParams, $location, movieDBConfig, utils, changeBackdrop, windowNotifications, basicMovieInformation, movieVideos) {

			var movieId = parseInt($routeParams.id),
				self = this,
				doError = function (err) {
					windowNotifications.addMessage(err.data ? 'Error: ' + err.data.status_message : 'Sorry, an error occurred.');
				};

			$scope.movie = null;
			$scope.videos = [];
			$scope.genres = '';
			$scope.posterImage = '';
			$scope.homepage = '';

			if(movieId !== movieId) {

				$location.path('/404');
				return;

			}

			self.applyMovieVideos = function(data) {

				$scope.videos = data.results.map(function(item) {

					var isYouTube = item.site === 'YouTube';

					return isYouTube ? {

						name: item.name,
						path: window.location.protocol + '//www.youtube.com/embed/' + item.key

					} : false;

				});

			};

			self.applyMovieDetailsData = function(data) {

				$scope.movie = data;

				movieDBConfig.getConfig(function (res) {

					$scope.genres = utils.formatListLabel(data.genres.map(function (item) {
							return item.name;
						}));

					if($scope.movie.poster_path) {
						$scope.posterImage = res.images.base_url + res.images.poster_sizes[3] + $scope.movie.poster_path;
					}

					$scope.homepage = $scope.movie.homepage;

					changeBackdrop($scope.movie.backdrop_path);

				});

			};

			self.loadMovieDetailsData = function() {

				/**
				 * Simpson's movie stub
				 */
				//applyMovieDetailsData({"adult":false,"backdrop_path":"/gMjtdTP6HIi7CDilqXwnX8vouxO.jpg","belongs_to_collection":null,"budget":75000000,"genres":[{"id":16,"name":"Animation"},{"id":35,"name":"Comedy"},{"id":10751,"name":"Family"}],"homepage":"http://www.simpsonsmovie.com/","id":35,"imdb_id":"tt0462538","original_language":"en","original_title":"The Simpsons Movie","overview":"After Homer accidentally pollutes the town's water supply, Springfield is encased in a gigantic dome by the EPA and the Simpsons are declared fugitives.","popularity":1.20716329399693,"poster_path":"/eCytnEriVur3rT47NWfkgPXD9qs.jpg","production_companies":[{"name":"Twentieth Century Fox Film Corporation","id":306},{"name":"Gracie Films","id":18}],"production_countries":[{"iso_3166_1":"US","name":"United States of America"}],"release_date":"2007-07-27","revenue":527068851,"runtime":87,"spoken_languages":[{"iso_639_1":"en","name":"English"}],"status":"Released","tagline":"See our family. And feel better about yours.","title":"The Simpsons Movie","video":false,"vote_average":6.7,"vote_count":491});

				basicMovieInformation.getResults($routeParams.id)
					.then(function (response) {
						self.applyMovieDetailsData(response);
					})
					['catch'](function (err) {
						doError(err);
					});

			};

			self.loadMovieVideos = function() {

				movieVideos.getResults($routeParams.id)
					.then(function (response) {
						self.applyMovieVideos(response);
					})
					['catch'](function (err) {
						doError(err);
					});

			};

			self.loadMovieVideos(movieId);
			self.loadMovieDetailsData(movieId);

		}]);

}(app));
/*jshint laxcomma:true, asi:true */
(function (app) {

	"use strict";

	app.controller('SearchFilms', [
		'$scope',
		'$rootScope',
		'$timeout',
		'personSearch',
		'moviesWithCast',
		'movieDBConfig',
		'$location',
		'windowNotifications',
		'changeBackdrop',
		'utils',
		function($scope, $rootScope, $timeout, personSearch, moviesWithCast, movieDBConfig, $location, windowNotifications, changeBackdrop, utils) {

			var keyFireLength = 4,
				chosenName,
				doError = function (err) {

					windowNotifications.addMessage(err.data ? 'Error: ' + err.data.status_message : 'Sorry, an error occurred.');

				};

			$scope.actorSearchTerm = '';
			$scope.movieSearchTerm = '';
			$scope.personResults = [];

			$scope.$watch("actorSearchTerm", function (newValue) {

				if(newValue.length > keyFireLength && $scope.actorSearchTerm !== chosenName) {

					loadPersonSearchData($scope.actorSearchTerm);

				}

			});

			$scope.setActorSearchTerm = function (name) {

				chosenName = name;
				$scope.actorSearchTerm = name;

			};

			$scope.actorSearchTermKeypress = function (e) {

				var el;

				if(e.keyCode === 13) {

					loadPersonSearchData($scope.actorSearchTerm);

				}

				if(e.keyCode === 40 && $scope.personResults.length) {

					el = $('#personResults li:first-child button');
					el.focus();

				}

			};

			$scope.closeError = function () {

				delete $scope.error;

			};

			$scope.formatKnownForString = function (arr) {

				var str = utils.formatListLabel(arr.map(function (item) {
					return item.title;
				}));

				return str ? 'Known for: ' + str : '';

			};

			$scope.chooseActor = function (personId, profilePath, name) {

				$scope.personResults = [];

				loadPersonMovies(personId);

				chosenName = name;
				$scope.actorSearchTerm = name;

				movieDBConfig.getConfig(function (movieConfig) {

					$scope.profileImage = profilePath ? movieConfig.images.base_url + movieConfig.images.profile_sizes[1] + profilePath : null;

				});

			};

			$scope.chooseMovie = function (movie) {

				$location.path('/movie/' + movie.id);

			};

			$scope.cancelPerson = function () {

				$scope.movies = [];
				$scope.actorSearchTerm = '';
				$scope.profileImage = null;
				changeBackdrop(null);

				$('.searchPersonControl').focus();

			};

			$scope.cancelMovieSearch = function () {

				$scope.movieSearchTerm = '';

			};

			function applyPersonSearchData(data) {

				$scope.personResults = data.results || [];

				$timeout(function () {
					$('.personBtn').keydown(function (e) {

						if(e.keyCode === 38) {

							$(e.target).parent().prev().children('.personBtn').focus();

						}

						if(e.keyCode === 40 && $scope.personResults.length) {

							$(e.target).parent().next().children('.personBtn').focus();

						}

					});
				});

			};

			function loadPersonSearchData(term) {

				/**
				 * Stubbing (would usually be in Jasmine unit test)
				 */
				/*applyPersonSearchData({

					results: [
						{
							'name': 'Bill Murray',
							'id': 1532,
							'known_for': [
								{
									title: 'Ghost Busters'
								},
								{
									title: 'Groundhog Day'
								}
							]
						},
						{
							'name': 'Billy Murray',
							'id': 63073,
							'known_for': [
								{
									title: 'Rise of the Footsoldier'
								},
								{
									title: 'One in the chamber'
								}
							]
						}
					]

				});*/

				personSearch.getResults(term)
					.then(function (response) {
						applyPersonSearchData(response);
					})
					['catch'](function (err) {
						doError(err);
					});

			};

			function applyMovieData (data) {

				var backdropPath;

				$scope.movies = data.results || [];

				if(data.results.length && typeof data.results[0].backdrop_path !== 'undefined') {
					backdropPath = data.results[0].backdrop_path;
				}

				changeBackdrop(backdropPath);

			};

			function loadPersonMovies (personId) {

				/**
				 * Stubbing (would usually be in Jasmine unit test)
				 */
				/*applyMovieData({
					results: [
						{
							'id': 123,
							'title': 'Dumb and Dumber To',
							'release_date': '2014-11-14'
						},
						{
							'id': 512,
							'title': 'Groundhog Day',
							'release_date': '1993-02-11'
						},
						{
							'id': 789,
							'title': 'Another',
							'release_date': '1993-02-11'
						}
					]
				});*/

				moviesWithCast.getResults(personId)
					.then(function (response) {
						applyMovieData(response);
					})
					['catch'](function (err) {
						doError(err);
					});

			};

		}]);

}(app));
(function (angular) {

	"use strict";

	angular.module("services", [])
		.provider("movieDBConfig", function () {

			var key = '',
				configCache = null;

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getConfig(cb) {

					if(configCache) {

						cb(configCache);
						return;

					}

					$http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/configuration?api_key=" + key
					}).then(function (response) {

						configCache = response.data;
						cb(configCache);

					}, function () {

						console.log('error loading config.');

					});

				};

				return {
					getConfig: getConfig
				};

			}];

		})
		.provider("personSearch", function () {

			var key = '',
				currentPerson = '';

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getResults(term) {

					currentPerson = term;

					//http://api.themoviedb.org/3/search/person?api_key=3b346f117a4f4fc787e8d7e4eeb73cd5&query=bill%20murray

					var request = $http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/search/person?api_key=" + key + "&query=" + term
					});

					return ( request.then(handleSuccess) );

				};

				function handleSuccess(response) {
					return ( response.data );
				};

				return {
					getResults: getResults
				};

			}];

		})
		.provider("moviesWithCast", function () {

			var key = '';

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getResults(personId) {

					//http://api.themoviedb.org/3/discover/movie

					var request = $http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/discover/movie?api_key=" + key + "&with_cast=" + personId
					});

					return ( request.then(handleSuccess) );

				};

				function handleSuccess(response) {
					return ( response.data );
				};

				return {
					getResults: getResults
				};

			}];

		})
		.provider("basicMovieInformation", function () {

			var key = '';

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getResults(movieId) {

					//http://api.themoviedb.org/3/movie/id

					var request = $http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/movie/" + movieId + "?api_key=" + key
					});

					return ( request.then(handleSuccess) );

				};

				function handleSuccess(response) {
					return ( response.data );
				};

				return {
					getResults: getResults
				};

			}];

		})
		.provider("movieVideos", function () {

			var key = '';

			this.setKey = function (string) {

				key = string;

			};

			this.$get = ['$http', function ($http) {

				function getResults(movieId) {

					//http://api.themoviedb.org/3/movie/id/videos

					var request = $http({
						method: "get",
						url: window.location.protocol + "//api.themoviedb.org/3/movie/" + movieId + "/videos?api_key=" + key
					});

					return ( request.then(handleSuccess) );

				};

				function handleSuccess(response) {
					return ( response.data );
				};

				return {
					getResults: getResults
				};

			}];

		})
		.factory("windowNotifications", ['$rootScope', function ($rootScope) {

			var messages = [];

			function showMessages () {

				$rootScope.error = {};
				$rootScope.error.message = messages[0];

			};

			function clearMessages () {

				$rootScope.error = null;

			};

			$rootScope.$on('clearMessages', function () {

				clearMessages();

			});

			return {

				addMessage : function (messageString) {

					messages.push(messageString);

					showMessages();

				},

				clearMessages : clearMessages

			};

		}])
		.factory("changeBackdrop", ['$rootScope', '$timeout', 'movieDBConfig', function ($rootScope, $timeout, movieDBConfig) {

			var doSet = function (path, movieConfig) {

					$rootScope.backdropImage = path ? movieConfig.images.base_url + movieConfig.images.backdrop_sizes[2] + path : null;

				},
				setBackDrop = function (path, movieConfig) {

					doSet(path, movieConfig);

				};

			return function (path) {

				//movieDBConfig = {"images":{"base_url":"http://image.tmdb.org/t/p/","secure_base_url":"https://image.tmdb.org/t/p/","backdrop_sizes":["w300","w780","w1280","original"],"logo_sizes":["w45","w92","w154","w185","w300","w500","original"],"poster_sizes":["w92","w154","w185","w342","w500","w780","original"],"profile_sizes":["w45","w185","h632","original"],"still_sizes":["w92","w185","w300","original"]},"change_keys":["adult","air_date","also_known_as","alternative_titles","biography","birthday","budget","cast","certifications","character_names","created_by","crew","deathday","episode","episode_number","episode_run_time","freebase_id","freebase_mid","general","genres","guest_stars","homepage","images","imdb_id","languages","name","network","origin_country","original_name","original_title","overview","parts","place_of_birth","plot_keywords","production_code","production_companies","production_countries","releases","revenue","runtime","season","season_number","season_regular","spoken_languages","status","tagline","title","translations","tvdb_id","tvrage_id","type","video","videos"]};

				movieDBConfig.getConfig(function (data) {

					setBackDrop(path, data);

				});

			};

		}])
		.factory("utils", [function () {

			return {

				formatListLabel : function (arr) {

					if(!arr || !arr.length) {
						return;
					}

					var str = '',
						arrLen = arr.length;

					for(var i = 0; i < arrLen; i++) {

						if(arr[i]) {
							str += str ? ', ' + arr[i] : arr[i];
						}

					}

					return str;

				}

			};

		}]);

}(angular));
(function (app) {

	"use strict";

	app.directive('imageonload', function () {
		return {
			restrict: 'A',
			scope: {
				imageonload: '&'
			},
			link: function ($scope, element) {
				element.bind('load', function () {
					$scope.imageonload();
				});
			}
		};
	});

	app.directive('onFocus', ['$parse', function ($parse) {
		return {
			link: function ($scope, element, attr) {
				var fn = $parse(attr.onFocus);
				element.bind('focus', function (event) {
					if (!$scope.$$phase) {
						$scope.$apply(function () {
							fn($scope, {$event: event});
						});
					}
					else {
						fn($scope, {$event: event});
					}
				});
			}
		};
	}]);

}(app));